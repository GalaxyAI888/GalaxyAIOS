"""init model_files

Revision ID: b1740c7371e5
Revises: 075c2de47b2a
Create Date: 2025-06-26 23:28:04.378135

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import aistack


# revision identifiers, used by Alembic.
revision: str = 'b1740c7371e5'
down_revision: Union[str, None] = '075c2de47b2a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('model_files',
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('source', sa.Enum('HUGGING_FACE', 'OLLAMA_LIBRARY', 'MODEL_SCOPE', 'LOCAL_PATH', name='sourceenum'), nullable=False),
    sa.Column('huggingface_repo_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('huggingface_filename', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ollama_library_model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_scope_model_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_scope_file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('local_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('local_dir', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('worker_id', sa.Integer(), nullable=True),
    sa.Column('cleanup_on_delete', sa.Boolean(), nullable=True),
    sa.Column('size', sa.BigInteger(), nullable=True),
    sa.Column('download_progress', sa.Float(), nullable=True),
    sa.Column('resolved_paths', sa.JSON(), nullable=True),
    sa.Column('state', sa.Enum('ERROR', 'DOWNLOADING', 'READY', name='modelfilestateenum'), nullable=False),
    sa.Column('state_message', sa.Text(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_index', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', aistack.schemas.common.UTCDateTime(), nullable=False),
    sa.Column('updated_at', aistack.schemas.common.UTCDateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_model_files_source_index'), 'model_files', ['source_index'], unique=True)
    op.create_table('models',
    sa.Column('embedding_only', sa.Boolean(), nullable=False),
    sa.Column('image_only', sa.Boolean(), nullable=False),
    sa.Column('reranker', sa.Boolean(), nullable=False),
    sa.Column('speech_to_text', sa.Boolean(), nullable=False),
    sa.Column('text_to_speech', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('source', sa.Enum('HUGGING_FACE', 'OLLAMA_LIBRARY', 'MODEL_SCOPE', 'LOCAL_PATH', name='sourceenum'), nullable=False),
    sa.Column('huggingface_repo_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('huggingface_filename', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ollama_library_model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_scope_model_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_scope_file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('local_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.Column('replicas', sa.Integer(), nullable=False),
    sa.Column('ready_replicas', sa.Integer(), nullable=False),
    sa.Column('categories', sa.JSON(), nullable=True),
    sa.Column('placement_strategy', sa.Enum('SPREAD', 'BINPACK', name='placementstrategyenum'), nullable=False),
    sa.Column('cpu_offloading', sa.Boolean(), nullable=True),
    sa.Column('distributed_inference_across_workers', sa.Boolean(), nullable=True),
    sa.Column('worker_selector', sa.JSON(), nullable=True),
    sa.Column('gpu_selector', aistack.schemas.common.JSON(), nullable=True),
    sa.Column('backend', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('backend_version', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('backend_parameters', sa.JSON(), nullable=True),
    sa.Column('env', sa.JSON(), nullable=True),
    sa.Column('restart_on_error', sa.Boolean(), nullable=True),
    sa.Column('distributable', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', aistack.schemas.common.UTCDateTime(), nullable=False),
    sa.Column('updated_at', aistack.schemas.common.UTCDateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_models_name'), 'models', ['name'], unique=True)
    op.create_table('model_instances',
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('source', sa.Enum('HUGGING_FACE', 'OLLAMA_LIBRARY', 'MODEL_SCOPE', 'LOCAL_PATH', name='sourceenum'), nullable=False),
    sa.Column('huggingface_repo_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('huggingface_filename', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ollama_library_model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_scope_model_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_scope_file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('local_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('worker_id', sa.Integer(), nullable=True),
    sa.Column('worker_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('worker_ip', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('pid', sa.Integer(), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('download_progress', sa.Float(), nullable=True),
    sa.Column('resolved_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('restart_count', sa.Integer(), nullable=True),
    sa.Column('last_restart_time', aistack.schemas.common.UTCDateTime(), nullable=True),
    sa.Column('state', sa.Enum('INITIALIZING', 'PENDING', 'STARTING', 'RUNNING', 'SCHEDULED', 'ERROR', 'DOWNLOADING', 'ANALYZING', 'UNREACHABLE', name='modelinstancestateenum'), nullable=False),
    sa.Column('state_message', sa.Text(), nullable=True),
    sa.Column('computed_resource_claim', aistack.schemas.common.JSON(), nullable=True),
    sa.Column('gpu_indexes', sa.JSON(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('distributed_servers', aistack.schemas.common.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', aistack.schemas.common.UTCDateTime(), nullable=False),
    sa.Column('updated_at', aistack.schemas.common.UTCDateTime(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_model_instances_name'), 'model_instances', ['name'], unique=True)
    op.create_table('modelinstancemodelfilelink',
    sa.Column('model_instance_id', sa.Integer(), nullable=False),
    sa.Column('model_file_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_file_id'], ['model_files.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['model_instance_id'], ['model_instances.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('model_instance_id', 'model_file_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('modelinstancemodelfilelink')
    op.drop_index(op.f('ix_model_instances_name'), table_name='model_instances')
    op.drop_table('model_instances')
    op.drop_index(op.f('ix_models_name'), table_name='models')
    op.drop_table('models')
    op.drop_index(op.f('ix_model_files_source_index'), table_name='model_files')
    op.drop_table('model_files')
    # ### end Alembic commands ###
